---
interface FormField {
  name: string;
  type: string;
  label: string;
  placeholder?: string;
  required?: boolean;
  minLength?: number;
  value?: string;
}

interface SubmitButtonConfig {
  text: string;
  loadingText: string;
}

interface DemoCredentials {
  enabled: boolean;
  username: string;
  password: string;
}

interface FormLink {
  href: string;
  text: string;
  class: string;
}

interface FormConfig {
  fields: FormField[];
  submitButton: SubmitButtonConfig;
  demoCredentials: DemoCredentials;
  links: FormLink[];
}

const { formConfig } = Astro.props as { formConfig: FormConfig };
console.log('Form Config:', formConfig);
---

<form class="login-form" id="loginForm" onsubmit="return false;">
  <div id="error-message" class="error-message" style="display: none;"></div>
  {formConfig.fields.map((field) => (
    <div class="form-group">
      <label for={field.name}>{field.label}</label>
      <input 
        type={field.type} 
        id={field.name}
        name={field.name}
        placeholder={field.placeholder} 
        required={field.required}
        value={field.value}
        minlength={field.minLength}
        class="form-control"
      />
    </div>
  ))}
  
  <button type="submit" class="btn btn-primary">
    {formConfig.submitButton.text}
  </button>
  
  {formConfig.demoCredentials.enabled && (
    <div class="demo-credentials">
      <p>Demo credentials:</p>
      <p>Username: <code>{formConfig.demoCredentials.username}</code></p>
      <p>Password: <code>{formConfig.demoCredentials.password}</code></p>
    </div>
  )}
  
  <div class="form-footer">
    {formConfig.links.map(link => 
      link.text.includes('account') ? (
        <span>Don't have an account? <a href={link.href} class={link.class}>{link.text}</a></span>
      ) : (
        <a href={link.href} class={link.class}>{link.text}</a>
      )
    )}
  </div>
</form>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('loginForm') as HTMLFormElement | null;
    if (!form) return;

    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      const submitButton = form.querySelector<HTMLButtonElement>('button[type="submit"]');
      const errorMessage = document.getElementById('error-message');
      
      try {
        // Update UI
        if (submitButton) {
          submitButton.disabled = true;
          submitButton.textContent = 'Signing in...';
        }
        
        if (errorMessage) {
          errorMessage.textContent = '';
          errorMessage.style.display = 'none';
        }
        
        // Submit form data
        const formData = new FormData(form);
        const response = await fetch('/api/login', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(Object.fromEntries(formData.entries()))
        });

        const data = await response.json();
        
        if (!response.ok || !data.success) {
          throw new Error(data.message || 'Login failed. Please try again.');
        }
        
        // If login is successful, store user data and redirect to dashboard
        if (data.user) {
          localStorage.setItem('user', JSON.stringify(data.user));
        }
        
        // Redirect to dashboard on successful login
        window.location.href = '/dashboard';
        
      } catch (error: unknown) {
        console.error('Login error:', error);
        if (errorMessage) {
          const errorMessageText = error instanceof Error 
            ? error.message 
            : 'An error occurred during login';
          errorMessage.textContent = errorMessageText;
          errorMessage.style.display = 'block';
        }
      } finally {
        if (submitButton) {
          submitButton.disabled = false;
          submitButton.textContent = 'Sign In';
        }
      }
    });
  });
</script>



<style>
  .login-form {
    max-width: 400px;
    margin: 0 auto;
    padding: 2rem;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    background: white;
  }
  
  .form-group {
    margin-bottom: 1.5rem;
  }
  
  label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: 500;
  }
  
  .form-control {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 1rem;
  }
  
  .btn {
    display: block;
    width: 100%;
    padding: 0.75rem;
    background: #0066cc;
    color: white;
    border: none;
    border-radius: 4px;
    font-size: 1rem;
    cursor: pointer;
    transition: background 0.2s;
  }
  
  .btn:hover {
    background: #0052a3;
  }
  
  .form-footer {
    margin-top: 1.5rem;
    padding-top: 1rem;
    border-top: 1px solid #eee;
    display: flex;
    justify-content: space-between;
    font-size: 0.9rem;
  }
  
  .forgot-password {
    color: #666;
    text-decoration: none;
  }
  
  .forgot-password:hover {
    text-decoration: underline;
  }
  
  .error-message {
    color: #dc3545;
    background-color: #f8d7da;
    border: 1px solid #f5c6cb;
    padding: 0.75rem;
    border-radius: 4px;
    margin-bottom: 1rem;
    display: none;
  }
  
  .demo-credentials {
    margin-top: 1.5rem;
    padding-top: 1rem;
    border-top: 1px solid #eee;
    font-size: 0.9rem;
    color: #666;
  }
  
  .demo-credentials p {
    margin: 0.25rem 0;
  }
  
  .demo-credentials code {
    background: #f5f5f5;
    padding: 0.2rem 0.4rem;
    border-radius: 3px;
    font-family: monospace;
  }
  
  a {
    color: #0066cc;
    text-decoration: none;
  }
  
  a:hover {
    text-decoration: underline;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('loginForm');
    if (!form) return;

    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const form = e.target as HTMLFormElement;
      const submitButton = form.querySelector('button[type="submit"]') as HTMLButtonElement | null;
      const errorMessage = document.getElementById('error-message') as HTMLDivElement | null;
      
      try {
        // Show loading state
        if (submitButton) {
          submitButton.disabled = true;
          submitButton.textContent = 'Signing in...';
        }
        
        // Hide any previous error messages
        if (errorMessage) {
          errorMessage.style.display = 'none';
        }
        
        // Get form data
        const formData = new FormData(form);
        const username = formData.get('username')?.toString() || '';
        const password = formData.get('password')?.toString() || '';
        
        // Validate inputs
        if (!username || !password) {
          throw new Error('Please fill in all fields');
        }
        
        // Prepare the request body
        const requestBody = JSON.stringify({
          username,
          password,
          redirectTo: '/dashboard'
        });
        
        console.log('Sending login request with body:', requestBody);
        
        // Submit form data
        console.log('Sending request to /api/login with body:', requestBody);
        const response = await fetch('/api/login', {
          method: 'POST',
          headers: { 
            'Content-Type': 'application/json',
            'Accept': 'application/json',
            'Cache': 'no-store'  // Prevent caching
          },
          body: requestBody,
          credentials: 'same-origin',  // Include cookies
          redirect: 'manual'  // Handle redirects manually
        });
        
        console.log('Received response status:', response.status, response.statusText);
        
        // Get the response data
        const data = await response.json().catch((e) => {
          console.error('Error parsing JSON:', e);
          return { success: false, message: 'Invalid server response' };
        });
        
        if (!response.ok) {
          throw new Error(data.message || 'Login failed');
        }
        
        // If login is successful, store user data and redirect
        if (data.success && data.redirectTo) {
          // Store user data in localStorage if needed
          if (data.user) {
            localStorage.setItem('user', JSON.stringify(data.user));
          }
          
          console.log('Redirecting to:', data.redirectTo);
          window.location.href = data.redirectTo;
        } else {
          throw new Error('Invalid response from server');
        }
        
      } catch (error) {
        console.error('Login error:', error);
        if (errorMessage) {
          errorMessage.textContent = error instanceof Error ? error.message : 'An error occurred';
          errorMessage.style.display = 'block';
        }
      } finally {
        if (submitButton) {
          submitButton.disabled = false;
          submitButton.textContent = 'Sign In';
        }
      }
    });
  });
</script>
