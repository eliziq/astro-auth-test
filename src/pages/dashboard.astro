---
import Layout from "../layouts/Layout.astro";
import LogoutButton from "../components/LogoutButton.astro";

interface User {
	id: number;
	firstName: string;
	lastName: string;
	username: string;
	image: string;
	email: string;
	name: string;
}

// Handle logout
---

<Layout title="Dashboard">
	<main class="dashboard">
		<div class="container">
			<header class="dashboard-header">
				<h1>Welcome!</h1>
				<LogoutButton />
			</header>
			
			<div class="profile-card">
				<div class="profile-header">
					<img
						src=""
						alt="Profile"
						class="profile-image"
					/>
					<div>
						<h2></h2>
						<p class="username"></p>
					</div>
				</div>

				<div class="profile-details">
					<div class="detail-item">
						<span class="label">User ID:</span>
						<span class="value"></span>
					</div>
					<div class="detail-item">
						<span class="label">Token (truncated):</span>
						<span class="value token"></span>
					</div>
				</div>
			</div>

			<div class="dashboard-actions">
				<a href="/" class="btn btn-primary">Go to Home</a>
			</div>
		</div>
	</main>
</Layout>

<script>
	// Client-side state management
	const userJson = localStorage.getItem("user");
	const token: string | null = localStorage.getItem("auth_token");
	const user: User | null = userJson ? JSON.parse(userJson) : null;

	// If not authenticated, redirect to login
	if (!userJson) {
		window.location.href = "/login";
	}

	// Update the DOM with user data
	const welcomeElement = document.querySelector('h1');
	if (welcomeElement) {
		welcomeElement.textContent = `Welcome, ${user?.firstName}!`;
	}

	const profileImage = document.querySelector('.profile-image') as HTMLImageElement;
	if (profileImage) {
		profileImage.src = user?.image || "https://via.placeholder.com/100";
	}

	const profileName = document.querySelector('.profile-header div h2');
	if (profileName) {
		profileName.textContent = `${user?.firstName} ${user?.lastName}`;
	}

	const profileUsername = document.querySelector('.profile-header div .username');
	if (profileUsername) {
		profileUsername.textContent = `@${user?.username}`;
	}

	const userIdElement = document.querySelector('.detail-item:nth-child(1) .value');
	if (userIdElement) {
		userIdElement.textContent = user?.id;
	}

	const tokenElement = document.querySelector('.detail-item:nth-child(2) .value');
	if (tokenElement) {
		tokenElement.textContent = token ? `${token.substring(0, 10)}...${token.substring(token.length - 10)}` : "Not available";
	}
</script>

<style>
	.dashboard {
		min-height: 100vh;
		padding: 2rem;
		background-color: #f5f7fa;
	}

	.container {
		max-width: 800px;
		margin: 0 auto;
	}

	.dashboard-header {
		display: flex;
		justify-content: space-between;
		align-items: center;
		margin-bottom: 2rem;
	}

	.btn-logout {
		background: #dc3545;
		color: white;
		border: none;
		padding: 0.5rem 1rem;
		border-radius: 4px;
		cursor: pointer;
		transition: background 0.2s;
	}

	.btn-logout:hover {
		background: #bb2d3b;
	}

	.profile-card {
		background: white;
		border-radius: 8px;
		box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
		padding: 2rem;
		margin-bottom: 2rem;
	}

	.profile-header {
		display: flex;
		align-items: center;
		margin-bottom: 1.5rem;
	}

	.profile-image {
		width: 80px;
		height: 80px;
		border-radius: 50%;
		object-fit: cover;
		margin-right: 1.5rem;
		border: 3px solid #f0f0f0;
	}

	.profile-header h2 {
		margin: 0 0 0.25rem 0;
		color: #1a1a1a;
	}

	.username {
		color: #666;
		margin: 0;
	}

	.profile-details {
		display: grid;
		gap: 1rem;
	}

	.detail-item {
		display: flex;
		flex-wrap: wrap;
		padding: 0.75rem 0;
		border-bottom: 1px solid #eee;
	}

	.detail-item:last-child {
		border-bottom: none;
	}

	.label {
		font-weight: 500;
		color: #555;
		min-width: 120px;
	}

	.value {
		color: #1a1a1a;
		flex: 1;
	}

	.token {
		font-family: monospace;
		word-break: break-all;
	}

	.dashboard-actions {
		text-align: center;
	}

	@media (max-width: 600px) {
		.profile-header {
			flex-direction: column;
			text-align: center;
		}

		.profile-image {
			margin: 0 0 1rem 0;
		}

		.detail-item {
			flex-direction: column;
			gap: 0.25rem;
		}
	}
</style>
