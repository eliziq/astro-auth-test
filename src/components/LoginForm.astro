---
import type { Config } from "../types/api";
import "../styles/forms.css";

const { formConfig } = Astro.props as { formConfig: Config["formConfig"] };
---

<form class="login-form" id="loginForm" onsubmit="return false;">
	<div id="error-message" class="error-message"></div>
	{
		formConfig.fields.map((field) => (
			<div class="form-group">
				<label for={field.name}>{field.label}</label>
				<input
					type={field.type as "text" | "password"}
					id={field.name}
					name={field.name}
					placeholder={field.placeholder}
					required={field.required}
					value={field.value}
					minlength={field.minLength}
					class="form-control"
				/>
			</div>
		))
	}

	<button type="submit" class="btn btn-primary">
		{formConfig.submitButton.text}
	</button>

	{
		formConfig.demoCredentials.enabled && (
			<div class="demo-credentials">
				<p>Demo credentials:</p>
				<p>
					Username: <code>{formConfig.demoCredentials.username}</code>
				</p>
				<p>
					Password: <code>{formConfig.demoCredentials.password}</code>
				</p>
			</div>
		)
	}

	<div class="form-footer">
		{
			formConfig.links.map((link) => (
				<a href={link.href} class={link.class}>
					{link.text}
				</a>
			))
		}
	</div>
</form>

<script>
	document.addEventListener("DOMContentLoaded", () => {
		const form = document.getElementById("loginForm") as HTMLFormElement | null;
		if (!form) return;

		form.addEventListener("submit", async (e) => {
			e.preventDefault();
			const submitButton = form.querySelector<HTMLButtonElement>('button[type="submit"]');
			const errorMessage = document.getElementById("error-message");

			try {
				// Update UI
				if (submitButton) {
					submitButton.disabled = true;
					submitButton.textContent = "Signing in...";
				}
				if (errorMessage) {
					errorMessage.textContent = "";
					errorMessage.style.display = "none";
				}

				// Submit form data
				const formData = new FormData(form);
				const response = await fetch("/api/login", {
					method: "POST",
					headers: { "Content-Type": "application/json" },
					body: JSON.stringify(Object.fromEntries(formData.entries())),
				});

				const data = await response.json();

				if (!response.ok || !data.success) {
					throw new Error(data.message || "Login failed. Please try again.");
				}

				// If login is successful, store user data and redirect to dashboard
				if (data.user) {
					localStorage.setItem("user", JSON.stringify(data.user));
				}
				if (data.auth_token) {
					localStorage.setItem("auth_token", data.auth_token);
				}

				// Redirect to dashboard on successful login
				window.location.href = "/dashboard";
			} catch (error: unknown) {
				console.error("Login error:", error);
				if (errorMessage) {
					const errorMessageText =
						error instanceof Error ? error.message : "An error occurred during login";
					errorMessage.textContent = errorMessageText;
					errorMessage.style.display = "block";
				}
			} finally {
				if (submitButton) {
					submitButton.disabled = false;
					submitButton.textContent = "Sign In";
				}
			}
		});
	});
</script>
